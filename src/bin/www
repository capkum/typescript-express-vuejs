#!/usr/bin/env node

'use strict';

// const server = require('../server');
const server = require('../server');
const debug = require('debug')('express:server');
const http = require('http');
const https = require('https');
const clc = require('cli-color');
const fs = require('fs');

// create http server
// let httpPort = normalizePort(process.env.Port || 8080);
// let app = server.Server.bootstrap().app;
// app.set('port', httpPort);
// let httpServer = http.createServer(app);

// create https server
let httpPort = normalizePort(process.env.Port || 8080);
let app = server.Server.bootstrap().app;
app.set('port', httpPort);
let httpServer = https.createServer({
  key: fs.readFileSync('/Users/capkum/https_key.pem'),
  cert: fs.readFileSync('/Users/capkum/cert.pem')
}, app);

httpServer.listen(httpPort);
httpServer.on('error', onError);
httpServer.on('listening', onListening);
process.on('SIGINT', onClose);
// process.on('SIGTERM', onClose);

function normalizePort (val) {
  let port = parseInt(val, 10);

  if (isNaN(val)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError (error) {
  if (error.sycall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${prot}`;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;

    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening () {
  let addr = httpServer.address();
  let bind = typeof addr === 'string' ? `Pipe ${addr}` : `Port ${addr.port}`;

  debug(`Listening ${bind}`);
  // console.log(addr);
  console.log(clc.green(`Running SERVER: http://localhost:${httpPort}\n`));
  console.log(clc.red(`Shutdown Server 'Ctrl + c'`));

}

function onClose () {
  console.log('');
  console.log('Shut donw the server!');
  process.exit(1);
}
